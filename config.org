#+title: Crabmacs
#+author: Joar von Arndt
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
* What is Crabmacs?
Crabmacs is originally my own configuration for GNU Emacs that I've manually tinkiered with to improve my workflow, now turned into a fully fledged system in order to make it more usable to others and give me an excuse for polishing it up.

A lot of inspiration is taken from preëxisting GNU Emacs configurations, most notably:
- [[https://github.com/snackon/Witchmacs][Witchmacs]]
- [[https://github.com/doomemacs/doomemacs][Doom Emacs]]
- [[https://seagle0128.github.io/.emacs.d/][Centaur Emacs]]
- [[https://github.com/rougier/nano-emacs][N Λ N O - Emacs]]

As well as minor details from other people and their documentation scattered across the Blogosphere.
The origin for the name should be fairly obvious. 
* Configuration

Removes an error message that shows on startup.
#+BEGIN_SRC elisp
  (setq byte-compile-warnings '(cl-functions))
  (require 'use-package)
  (setq use-package-always-defer t)

#+END_SRC

Uses EXWM as a window manager.
#+BEGIN_SRC elisp
  (use-package exwm
    (setq exwm-workspace-number 10))
  (use-package exwm-config
    :init
    (exwm-config-example))
  (exwm-enable)
#+END_SRC

Sets up various packages.
#+BEGIN_SRC elisp
   (use-package latex-pretty-symbols)
   (use-package pretty-mode
     :init
     (global-pretty-mode t))
   (use-package magit)
   (use-package git-commit)
   (use-package org-agenda)
   (use-package org-roam)
   (use-package xah-fly-keys
     :init
     (xah-fly-keys-set-layout "qwerty")
     (xah-fly-keys 1))
   (use-package autothemer)

#+END_SRC

Disables certain visual elements on startup.
#+BEGIN_SRC elisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+END_SRC

Adds line numbers for various major modes.
#+BEGIN_SRC elisp
  (add-hook 'csharp-mode-hook 'linum-mode t)
  (add-hook 'emacs-lisp-mode-hook 'linum-mode t)
#+END_SRC

Configures the all-important emacs dashboard that shows up on startup 
#+BEGIN_SRC elisp
  (use-package dashboard
    :init
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Gnu Emacs")
    (setq dashboard-center-content 'middle)
    (setq dashboard-startup-banner "~/Pictures/xemacs_red.svg")
    (setq compilation-ask-about-save nil)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items nil)
    (setq dashboard-set-navigator nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer nil)
    )
#+END_SRC

Code completion using corfu.
#+BEGIN_SRC elisp
      (use-package corfu
        :config
        (global-corfu-mode))

    (use-package cape
      ;; Bind dedicated completion commands
      ;; Alternative prefix keys: C-c p, M-p, M-+, ...
      :bind (("C-c p p" . completion-at-point) ;; capf
             ("C-c p t" . complete-tag)        ;; etags
             ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
             ("C-c p h" . cape-history)
             ("C-c p f" . cape-file)
             ("C-c p k" . cape-keyword)
             ("C-c p s" . cape-symbol)
             ("C-c p a" . cape-abbrev)
             ("C-c p l" . cape-line)
             ("C-c p w" . cape-dict)
             ("C-c p \\" . cape-tex)
             ("C-c p _" . cape-tex)
             ("C-c p ^" . cape-tex)
             ("C-c p &" . cape-sgml)
             ("C-c p r" . cape-rfc1345))
      :init
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)
      (add-to-list 'completion-at-point-functions #'cape-file)
      (add-to-list 'completion-at-point-functions #'cape-elisp-block)
      (add-to-list 'completion-at-point-functions #'cape-history)
      ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
      ;;(add-to-list 'completion-at-point-functions #'cape-tex)
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
      ;;(add-to-list 'completion-at-point-functions #'cape-dict)
      ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
      ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )

    (use-package eglot
      :commands (eglot eglot-ensure)
      :hook
      (python-mode . eglot-ensure)
      (LaTeX-mode . eglot-ensure)
      (csharp-mode . eglot-ensure))

    (use-package vertico
      :init
      (vertico-mode)
      (setq vertico-count 10)
      )
#+END_SRC

Configures Org-mode to make it more attractive and useable.
#+BEGIN_SRC elisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete))

  (with-eval-after-load 'org
    (setq org-format-latex-options
	  (plist-put org-format-latex-options
		     :scale 1.3
		     ))
    (setq org-format-latex-options
	  (plist-put org-format-latex-options
		     :html-scale 3
		     ))
    (setq org-startup-indented t)
    (setq prettify-symbols-mode t)
    (add-hook 'org-mode-hook 'visual-line-mode)
    (setq org-toggle-pretty-entities t))
#+END_SRC

#+BEGIN_SRC elisp
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (use-package org-bullets
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Improves the dired experience to be better. Take that n³ and midnight commander!
#+BEGIN_SRC elisp
  (use-package openwith
    :init
    (openwith-mode t)
    (setq openwith-associations (list
                                 (list (openwith-make-extension-regexp
                                        '("png" "jpg" "jpeg")) "eog" '(file))
                                 (list (openwith-make-extension-regexp
                                        '("mkv" "mp4")) "mpv" '(file))
                                 '("\\.pdf'" "evince" (file))
                                 ))
    (setq dired-listing-switches "-aBhl  --group-directories-first"))
  #+END_SRC

Sets up electric pairs to make writing certain things faster and easier.
  #+BEGIN_SRC elisp
    (setq electric-pair-pairs '(
                                (?\{ . ?\})
                                (?\( . ?\))
                                (?\[ . ?\])
                                (?\" . ?\")
                                (?\$ . ?\$)
                                ))
    (electric-pair-mode t)
#+END_SRC

Enable mouse use when running Emacs in the terminal.
#+BEGIN_SRC elisp
  (xterm-mouse-mode)
#+END_SRC

#+BEGIN_SRC elisp
  (use-package golden-ratio
      :init
      (golden-ratio-mode 1)
      )
#+END_SRC
