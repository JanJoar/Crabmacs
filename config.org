#    Kudu --- A fully functioning Gnu Emacs system
#    Copyright (C) 2023  Joar von Arndt
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

#+title: Kudu
#+author: Joar von Arndt
#+STARTUP: overview
* What is Kudu?
Kudu Emacs is originally Joar von Arndt's own configuration for GNU Emacs that has manually been tinkered with to improve its workflow, and now be turned into a fully fledged system compromising Emacs and Guix implemetations of the tools required to form a useable operating system. The goal is to have a fully featured and easily hackable system configurable entierly with lisp, or at least with user-facing tools configurable in its dialects. We wanted to use this as a platform to learn about practical applications of lisp and the design of operating systems and to see if a lisp-system is usable enough for day-to-day computing purposes.

A lot of inspiration is taken from preëxisting GNU Emacs configurations, most notably:
- [[https://github.com/snackon/Witchmacs][Witchmacs]]
- [[https://seagle0128.github.io/.emacs.d/][Centaur Emacs]]
- [[https://github.com/rougier/nano-emacs][N Λ N O - Emacs]]

Naturally it also incorporates aspects of other GNU/Linux distributions (Most notably GNU Guix) like:
- Declarative systems configuration
- A fully fledged installer written in Emacs Lisp
- A working GUI environment

Naturally various inspirations are taken from from other people and their documentation scattered across the Blogosphere or in the READMEs of the respective Emacs packages.

The origin for the name is the kudu, an antelope similar to that of the Gnu, the namesake of the GNU Project. Kudu is not part of the GNU Project, and it's developers are not members of GNU or the FSF. However we share a positive opinion of free software and therefore want to contribute to its mainstream adoption. 
* Configuration

Removes an error message that shows on startup.
#+BEGIN_SRC elisp
  (setq byte-compile-warnings '(cl-functions))
#+END_SRC

** Use-package
#+BEGIN_SRC elisp
  (setq use-package-always-defer t
        use-package-always-ensure t
        load-prefer-newer t)
#+END_SRC
** EXWM
Uses EXWM as a window manager but only loads it if no other window manager is found. This way startup time isn't wasted whenever the user wants to run Emacs in the terminal, on a computer using a desktop environment, or another window manager.
#+BEGIN_SRC elisp

  (setq switch-to-buffer-obey-display-actions t)
    ;; if there was an error detecting the window manager, initialize EXWM
    ;(when (and (get-buffer "*window-manager-error*")
    ;           (eq window-system 'x))
      ;; exwm startup goes here
      (display-battery-mode 1)
      (setq display-time-day-and-date t)
      (display-time-mode 1)

      ;; Creates 10 different workspaces, from 0 to 9.
      (setq exwm-workspace-number 10)

      ;; These  keys will always be sent to EXWM rather than to the X window.
      (setq exwm-input-prefix-keys
            '(?\C-x
              ?\C-g
              ?\M-x
              ?\M-z))

      ;; Sends the key after C-q directly to the X window.
      ;; (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

      (setq exwm-input-global-keys
            `(
              ([?\s-r] . exwm-reset)
              ([s-left] . windmove-left)
              ([s-right] . windmove-right)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)
              ([?\s-w] . exwm-workspace-switch)
              ([?\C-q] . exwm-input-send-next-key)
              ([?\s-a] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))
              ([?\s-w] . exwm-workspace-switch)
              ))
      ;; Actually starts EXWM
      (exwm-enable)
  ;    )

    ;; Checks if a window manager is already running
  ;  (when (get-buffer "*window-manager*")
  ;    (kill-buffer "*window-manager*"))
  ;  (when (get-buffer "*window-manager-error*")
  ;    (kill-buffer "*window-manager-error*"))
  ;  (when (executable-find "wmctrl")
  ;    (shell-command "wmctrl -m ; echo $?" "*window-manager*" "*window-manager-error*"))
#+END_SRC
** Minor visual elements
Modifies certain visual elements on startup.
#+BEGIN_SRC elisp
  (setq inhibit-startup-screen t
        visible-bell t
        global-prettify-symbols-mode t)

  (use-package mode-icons
    :config
    (mode-icons-mode)
    )
#+END_SRC
*** Indentation
Keeps code fully indented in a nice way.
#+BEGIN_SRC elisp
  (setq-default tab-width 2)
  (setq-default standard-indent 4)
  (setq-default indent-tabs-mode nil)

  (use-package aggressive-indent
    :hook (prog-mode . aggressive-indent-mode))
#+END_SRC
** Line numbers
Adds line numbers for various major modes.
#+BEGIN_SRC elisp
    (define-global-minor-mode prog-line-numbers-mode display-line-numbers-mode
      (lambda ()
        (when (derived-mode-p 'prog-mode)
          (display-line-numbers-mode 1))))
#+END_SRC
** Dashboard
Configures the all-important emacs dashboard that shows up on startup 
#+BEGIN_SRC elisp
  (use-package dashboard
    :init
    (dashboard-setup-startup-hook)
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-banner-logo-title "Gnu Emacs")
    (setq dashboard-center-content 'middle)
    (setq dashboard-startup-banner "~/Pictures/xemacs_red.svg")
    (setq compilation-ask-about-save nil)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items (recents . 5))
    (setq dashboard-set-navigator nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer nil)
    )
#+END_SRC
** Completion
Code completion using corfu.
#+BEGIN_SRC elisp
      (use-package corfu
        :config
        (global-corfu-mode))

    (use-package cape
      ;; Bind dedicated completion commands
      ;; Alternative prefix keys: C-c p, M-p, M-+, ...
      :bind (("C-c p p" . completion-at-point) ;; capf
             ("C-c p t" . complete-tag)        ;; etags
             ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
             ("C-c p h" . cape-history)
             ("C-c p f" . cape-file)
             ("C-c p k" . cape-keyword)
             ("C-c p s" . cape-symbol)
             ("C-c p a" . cape-abbrev)
             ("C-c p l" . cape-line)
             ("C-c p w" . cape-dict)
             ("C-c p \\" . cape-tex)
             ("C-c p _" . cape-tex)
             ("C-c p ^" . cape-tex)
             ("C-c p &" . cape-sgml)
             ("C-c p r" . cape-rfc1345))
      :init
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)
      (add-to-list 'completion-at-point-functions #'cape-file)
      (add-to-list 'completion-at-point-functions #'cape-elisp-block)
      (add-to-list 'completion-at-point-functions #'cape-history)
      ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
      ;;(add-to-list 'completion-at-point-functions #'cape-tex)
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
      ;;(add-to-list 'completion-at-point-functions #'cape-dict)
      ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
      ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )

    (use-package eglot
      :commands (eglot eglot-ensure)
      :hook
      (python-mode . eglot-ensure)
      (LaTeX-mode . eglot-ensure)
      (csharp-mode . omnisharp-mode))

    (use-package vertico
      :init
      (vertico-mode)
      (setq vertico-count 10)
      )
#+END_SRC
** Org-mode
Configures Org-mode to make it more attractive and useable.
#+BEGIN_SRC elisp
  (use-package emacs
    :init
    (setq completion-cycle-threshold 2)
    (setq tab-always-indent 'complete))

  (use-package org-tempo)
  (use-package org
    :hook (org-mode . visual-line-mode)
    :init
    (setq org-format-latex-options
          (plist-put org-format-latex-options
                     :scale 1.3
                     ))
    (setq org-format-latex-options
          (plist-put org-format-latex-options
                     :html-scale 3
                     ))
    (setq org-startup-indented t
          org-toggle-pretty-entities t
          org-hide-leading-stars t
          org-hide-emphasis-markers t)
    )
    (use-package org-superstar
      :hook (org-mode . org-superstar-mode))
    (use-package org-fragtog
      :hook (org-mode . org-fragtog-mode))
    (use-package toc-org
      :hook (org-mode . toc-org-mode))
    (use-package org-appear
      :hook (org-mode . org-appear-mode))

    (use-package org-modern
      :hook
      (org-mode . org-modern-mode)
      (org-agenda-finalize . org-modern-agenda)
      :custom
      (org-modern-table-horizontal 2)
      (org-modern-table-vertical 1)
      (org-modern-star nil)
      (org-modern-hide-stars nil)
      (org-modern-checkbox nil)
      )
    (use-package org-modern-indent
      :load-path "~/.emacs.d/site-lisp/org-modern-indent"
      :hook (org-mode . org-modern-indent-mode))

 #+END_SRC
** Dired
Improves the dired experience to be better. Take that n³ and midnight commander!
#+BEGIN_SRC elisp
  (use-package openwith
    :init
    (openwith-mode t)
    (setq openwith-associations (list
                                 (list (openwith-make-extension-regexp
                                        '("png" "jpg" "jpeg")) "eog" '(file))
                                 (list (openwith-make-extension-regexp
                                        '("mkv" "mp4")) "mpv" '(file))
                                 '("\\.pdf'" "evince" (file))
                                 )))
  (setf dired-kill-when-opening-new-dired-buffer t)
  (setq dired-listing-switches "-aBhl  --group-directories-first")
  (defalias 'eaf-open-in-file-manager #'dired)
  #+END_SRC
** Parens pairing
Sets up electric pairs to make writing certain things faster and easier.
#+BEGIN_SRC elisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\$ . ?\$)
                              ))
  (electric-pair-mode t)
#+END_SRC
** Mouse in terminal
Enable mouse use when running Emacs in a terminal emulator.
#+BEGIN_SRC elisp
  (xterm-mouse-mode)
#+END_SRC
** Golden ratio
#+BEGIN_SRC elisp
  (use-package golden-ratio
      :init
      (golden-ratio-mode 1)
      )
#+END_SRC

** Emacs Application Framework
#+BEGIN_SRC elisp
  (use-package eaf
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
    :config
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
    (defalias 'browse-web #'eaf-open-browser)
    (setq eaf-browser-default-search-engine "duckduckgo")
    (setq eaf-browse-blank-page-url "https://duckduckgo.com")
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding)

    (require 'eaf-browser)
    (require 'eaf-map)
    (require 'eaf-music-player)
    )
#+END_SRC

** Server
Launch the Emacs server after init.
#+BEGIN_SRC elisp
;  (add-hook 'after-init-hook '(unless (and
;                                       (fboundp 'server-running-p)
;                                       (server-running-p)
;                                       )
;                                (server-start)))
#+END_SRC
